    random_competitive_decks = logisticRegressionKarten.getRandomDecks(prepaired_decks, FormatType.COMPETITIVE, False, SAMPLE_SIZE)
    
    random_casual_decks = logisticRegressionKarten.getRandomDecks(prepaired_decks, FormatType.CASUAL, False, SAMPLE_SIZE)
    
    random_competitive_decks_card_hits = logisticRegressionKarten.getListOfHitsOnSpecificCard(random_competitive_decks, SEARCH_THIS_CARD)
    
    random_casual_decks_card_hits = logisticRegressionKarten.getListOfHitsOnSpecificCard(random_casual_decks, SEARCH_THIS_CARD)

    hits = np.concatenate([random_competitive_decks_card_hits, random_casual_decks_card_hits])
    deck_type = np.array([1]*len(random_competitive_decks_card_hits) + [0]*len(random_casual_decks_card_hits))

    X = sm.add_constant(hits)
    Y = deck_type

    model = sm.Logit(Y, X)
    results = model.fit()

    predicted_probs = results.predict(X)
    results.summary()

    # Wahrscheinlichkeiten plotten
    plt.figure(figsize=(10, 6))
    plt.scatter(hits, Y, c=Y, cmap='coolwarm', label='Tatsächliche Werte', alpha=0.6)
    plt.scatter(hits, predicted_probs, color='black', label='Vorhergesagte Wahrscheinlichkeiten')

    plt.title('Logistische Regression: Vorhersage des Deck-Typs basierend auf Preisen')
    plt.xlabel('Preis')
    plt.ylabel('Wahrscheinlichkeit für Anime-Deck')
    plt.legend()
    plt.grid(True)

    plt.show()

    threshold = 0.5
    y_pred = (predicted_probs >= threshold).astype(int)
    cm = confusion_matrix(Y, y_pred)

    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Nicht-Tournament-Deck", "Tournament-Deck"])
    disp.plot(cmap=plt.cm.Blues)
    plt.title("Konfusionsmatrix für das logistische Regressionsmodell")
    plt.show()